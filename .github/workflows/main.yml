name: Reviw Action

on:
  pull_request_target:
    types: [labeled]

jobs:
  process_html:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Debug context
        run: |
          echo "Event label name: ${{ github.event.label.name }}"
          echo "Event label: ${{ toJson(github.event.label) }}"
          echo "PR Assignees: ${{ toJson(github.event.pull_request.assignees) }}"
          echo "Actor: $GITHUB_ACTOR"

      - name: Check if assigned reviewer matches
        run: |
          PR_ASSIGNEES="${{ toJson(github.event.pull_request.assignees) }}"
          if [[ "$PR_ASSIGNEES" != *"$GITHUB_ACTOR"* ]]; then
            echo "You are not assigned to review this PR. Exiting..."
            exit 78
          fi

      - name: Extract key and iv from PR description
        id: extract-key-iv
        run: |
          # Get the PR description
          PR_BODY=$(jq -r '.pull_request.body' $GITHUB_EVENT_PATH)
          
          # Extract dynamic input and file path from PR description
          DYNAMIC_INPUT=$(echo "$PR_BODY" | sed -n 's/^.*Dynamic Input: \(.*\)$/\1/p')
          FILE_PATH=$(echo "$PR_BODY" | sed -n 's/^.*File Path: \(.*\)$/\1/p')
          
          # Calculate SHA-256 of dynamic input
          HASH=$(echo -n "$DYNAMIC_INPUT" | sha256sum | cut -d ' ' -f 1)
          
          # Convert HASH from hex
          HASH_HEX=$(echo -n "$HASH" | xxd -r -p)
          
          # Apply XOR with XOR_KEY
          XOR_KEY=${{ secrets.XOR_KEY }}
          XOR_RESULT=$(echo -n "$HASH_HEX" | xxd -p -c 64 | xxd -p -r | xxd -p -l 64 | xxd -p -r -u | xxd -p -l 32)
          
          # Split XOR_RESULT into KEY and IV
          KEY=$(echo -n "$XOR_RESULT" | cut -c1-32)
          IV=$(echo -n "$XOR_RESULT" | cut -c33-64)
          
          # Set output variables
          echo "::set-output name=dynamic_input::$DYNAMIC_INPUT"
          echo "::set-output name=file_path::$FILE_PATH"
          echo "::set-output name=key::$KEY"
          echo "::set-output name=iv::$IV"

      - name: Process and convert HTML files to .htm.jw
        if: github.event.label.name == 'new blobs'
        run: |
          DYNAMIC_INPUT="${{ steps.extract-key-iv.outputs.dynamic_input }}"
          FILE_PATH="${{ steps.extract-key-iv.outputs.file_path }}"
          KEY="${{ steps.extract-key-iv.outputs.key }}"
          IV="${{ steps.extract-key-iv.outputs.iv }}"
          
          echo "Dynamic Input: $DYNAMIC_INPUT"
          echo "File Path: $FILE_PATH"
          echo "Key: $KEY"
          echo "IV: $IV"
          
          # Ensure FILE_PATH is defined and not empty
          if [ -z "$FILE_PATH" ]; then
            echo "File Path is not defined in the PR description."
            exit 1
          fi
          
          # Check if FILE_PATH directory exists
          if [ -d "$FILE_PATH" ]; then
            echo "Directory $FILE_PATH exists."
            
            # Create directory for artifacts
            mkdir -p ./artifacts
            
            # Process each .htm file in FILE_PATH
            for file in "$FILE_PATH"/*.htm; do
              if [ -f "$file" ]; then
                echo "Processing file: $file"
                
                # Convert HTML content to hexdump
                hexdump=$(xxd -p -c 16 "$file")
                
                # Save the hexdump to a new file with .hexhtm extension
                hexhtm_file="./artifacts/$(basename "${file%.htm}.hexhtm")"
                echo "$hexdump" > "$hexhtm_file"
                echo "Created $hexhtm_file"
                
                # Convert .hexhtm to .htm.jw using openssl
                htm_jw_file="./artifacts/$(basename "${file%.htm}.htm.jw")"
                cat "$hexhtm_file" | xxd -r -p | openssl enc -aes-256-cbc -K "$KEY" -iv "$IV" -out "$htm_jw_file"
                echo "Created $htm_jw_file"
              else
                echo "No HTML files found in the specified directory."
              fi
            done
            
            # Upload .htm.jw files as artifacts
            echo "Uploading .htm.jw files as artifacts..."
            ls ./artifacts/*.htm.jw
          else
            echo "Directory $FILE_PATH does not exist or is empty."
          fi

      - name: Upload artifacts
        if: github.event.label.name == 'new blobs'
        uses: actions/upload-artifact@v2
        with:
          name: processed-html-files
          path: ./artifacts/*.htm.jw
